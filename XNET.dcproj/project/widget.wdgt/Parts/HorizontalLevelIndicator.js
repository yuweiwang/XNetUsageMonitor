/*jsl:import LevelIndicator.js*/

/* 
 This file was generated by Dashcode and is covered by the 
 license.txt included in the project.  You may edit this file, 
 however it is recommended to first turn off the Dashcode 
 code generator otherwise the changes will be lost.
 */

// Note: Properties and methods beginning with underbar ("_") are considered private and subject to change in future Dashcode releases.

/**   
 *  @declare DC.HorizontalLevelIndicator
 *  @extends DC.LevelIndicator
 *  
 */
 
DC.HorizontalLevelIndicator= Class.create(DC.LevelIndicator, {

    exposedBindings: [],

    __viewClassName__: "HorizontalLevelIndicator",

    partSetup: function(spec)
    {
        this.imageOffPath = spec.imageOff == null ? "Images/HorizontalOff.png" : spec.imageOff;
        this.imageOnPath = spec.imageOn == null ? "Images/HorizontalOn.png" : spec.imageOn;
        this.imageWarningPath = spec.imageWarning == null ? "Images/HorizontalWarning.png" : spec.imageWarning;
        this.imageCriticalPath = spec.imageCritical == null ? "Images/HorizontalCritical.png" : spec.imageCritical;

        this.base(spec);
    },
    
    _getMousePosition:  function(event)
    {
        if (event !== undefined)
            return event.pageX;
        else
            return 0;
    },
    
    _computeValueFromMouseEvent:  function(event)
    {
        var style = this._computedLevelIndicatorStyle;
        var left = style ? parseInt(style.getPropertyValue("left"), 10) : 0;
        var width = style ? parseInt(style.getPropertyValue("width"), 10) : 0;
        var position = this._getMousePosition(event);
        var newValue = this.minValue + (((this.maxValue - this.minValue) * (position - left)) / width);
        
        if (newValue < this.minValue)
            newValue = this.minValue;
        else if (newValue > this.maxValue)
            newValue = this.maxValue;
            
        return newValue;
    },
    
    _computePositionFromValue:  function(newValue)
    {
        var style = this._computedLevelIndicatorStyle;
        var width = style ? parseInt(style.getPropertyValue("width"), 10) : 0;
        var position = (width * (newValue - this.minValue)) / (this.maxValue - this.minValue);
        
        return position;
    },
    
    _computeValueFromPosition:  function(position)
    {
        var style = this._computedLevelIndicatorStyle;
        var width = style ? parseInt(style.getPropertyValue("width"), 10) : 0;
        var newValue = this.minValue + (((this.maxValue - this.minValue) * position) / width);
            
        return newValue;
    },
    
    _computeLevelIndicatorLength:  function()
    {
        // get the current actual slider length
        var style = this._computedLevelIndicatorStyle;
        return style ? parseInt(style.getPropertyValue("width"), 10) : 0;
    },
    
    _layoutElements:  function()
    {
        var length = this._computeLevelIndicatorLength();
        var valuePosition = this._computePositionFromValue(this.value);
        var delta = 0;
        
        var imagePath = null;
        
        while (delta + this.imageWidth <= length)
        {
            var element = document.createElement("div");
            var style = element.style;
            style.position = "absolute";
            style.display = "block";
            style.top = "0px";
            style.left = delta + "px";
            style.width = this.imageWidth + "px";
            style.height = this.imageHeight + "px";
            
            var currentValue = this.value;
            if (this.stacked)
            {
                currentValue = this._computeValueFromPosition(delta + this.imageWidth);
            }
            if (delta >= valuePosition)
                imagePath = this.imageOffPath;
            else if (currentValue >= this.criticalValue)
                imagePath = this.imageCriticalPath;
            else if (currentValue >= this.warningValue)
                imagePath = this.imageWarningPath;
            else if (this.value >= this.onValue)
                imagePath = this.imageOnPath;
            else
                imagePath = this.imageOffPath;
            
            imagePath = this._baseImagesPath + imagePath;
            style.background = "url('" + imagePath + "') no-repeat top left";
            this._track.appendChild(element);
                        
            delta += this.imageWidth + this.spacing;
        }
    }

});